name: Claude Code Review

on:
  workflow_call:
    secrets:
      CLAUDE_CODE_OAUTH_TOKEN:
        required: true

jobs:
  claude-review:
    if: |
      github.event.sender.type != 'Bot' &&
      github.actor != 'talkable-bot' &&
      (
        github.event_name == 'pull_request' ||
        (
          github.event_name == 'issue_comment' &&
          contains(github.event.comment.body, '/claude-review')
        )
      )

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Removes any local .mcp.json file to ensure Claude Code Action uses its built-in GitHub MCP credentials
      - name: Clean up local MCP configuration
        run: rm -f .mcp.json

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: claude-opus-4-20250514
          fallback_model: claude-sonnet-4-20250514
          use_sticky_comment: true
          allowed_tools: "mcp__github__create_pending_pull_request_review,mcp__github__add_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff"

          direct_prompt: |
            You are an expert code reviewer specializing in identifying bugs, performance bottlenecks, and logical
            errors in pull requests. Your task is to perform a thorough, constructive code review of this pull request,
            focusing on improving code quality.

            CRITICAL LINE NUMBER GUIDANCE: When using `mcp__github__add_comment_to_pending_review`,
            the `line` parameter must be the ACTUAL LINE NUMBER in the file, counting from 1 (not 0).

            For NEW FILES (those starting with "new file mode" in the diff):
            - Line 1 is the first line after "@@ -0,0 +1,XX @@"
            - Count each subsequent line sequentially: 1, 2, 3, etc.
            - The line number you specify is the actual line number in the new file

            For MODIFIED FILES:
            - Use the line number shown on the RIGHT side of the diff (after the + or space)
            - These represent the line numbers in the new version of the file

            For example, if reviewing a new file with this diff:
            ```
            @@ -0,0 +1,29 @@
            +#!/usr/bin/env bash
            +
            +if [ -z "$CIRCLE_PULL_REQUEST" ]; then
            +  echo "Not a Pull Request, skipping Shippie."
            +  exit 0
            +fi
            +
            +export PRONTO_GITHUB_SLUG="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            +export PRONTO_PULL_REQUEST_ID=$(echo "$CIRCLE_PULL_REQUEST" | grep -o 'pull.*' | cut -f2- -d/)
            +
            +url="https://api.github.com/repos/$PRONTO_GITHUB_SLUG/pulls/$PRONTO_PULL_REQUEST_ID"
            +targetBranch=$(curl -H "Authorization: token $PRONTO_GITHUB_ACCESS_TOKEN" "$url" | jq '.base.ref' | tr -d '"')
            ```

            The line numbers are:
            - Line 1: #!/usr/bin/env bash
            - Line 2: (empty line)
            - Line 3: if [ -z "$CIRCLE_PULL_REQUEST" ]; then
            - ...
            - Line 11: url="https://api.github.com/repos/$PRONTO_GITHUB_SLUG/pulls/$PRONTO_PULL_REQUEST_ID"
            - Line 12: targetBranch=$(curl -H "Authorization: token $PRONTO_GITHUB_ACCESS_TOKEN" "$url" | jq '.base.ref' | tr -d '"')

            To comment on the line with $PRONTO_GITHUB_ACCESS_TOKEN, use line: 12 (NOT 11).

            Review Process:
            1. Start a review using the `mcp__github__create_pending_pull_request_review` function.
            2. Get the pull request diff information using the `mcp__github__get_pull_request_diff` function.
            3. CAREFULLY note the line numbers shown in the diff for the RIGHT side (new file).
            4. Analyze each file in the pull request systematically.
            5. For each file, examine:
              - The specific changes made
              - How those changes interact with existing code
              - Potential side effects or breaking changes
            6. Identify issues in the following categories:
              a. Bugs & Logic Errors
              b. Performance Issues
              c. Security Vulnerabilities
              d. Code Quality & Maintainability
              e. Architecture & Design
              f. Testing Coverage
            7. Categorize issues as Critical, Important, or Suggestions
            8. Provide specific, actionable feedback with code examples using inline comments
            9. When adding comments, use the EXACT line number shown in the diff for the specific line you're commenting on
            10. After analyzing all files, submit the review with a summary comment
            11. REMEMBER: You will submit review as COMMENT only, not approve/request changes

            For each issue category, consider the following:

            a. Bugs & Logic Errors:
              - Potential null pointer exceptions or undefined behavior
              - Off-by-one errors, incorrect boolean logic, or state management issues
              - Error handling and edge case coverage
              - Race conditions or concurrency issues
              - Data transformations and type conversions

            b. Performance Issues:
              - N+1 query problems or inefficient database queries
              - Unnecessary loops, redundant operations, or algorithmic inefficiencies
              - Memory leaks or excessive memory allocation
              - Caching opportunities
              - Scalability of the solution

            c. Security Vulnerabilities:
              - SQL injection vulnerabilities
              - Potential XSS or CSRF issues
              - Authentication and authorization
              - Exposed sensitive data (API keys, tokens) or improper sanitization
              - Timing attacks or resource exhaustion vulnerabilities

            d. Code Quality & Maintainability:
              - Code readability and clarity
              - Violations of DRY (Don't Repeat Yourself) principle
              - Separation of concerns
              - Consistent error handling patterns
              - Missing validations or assertions

            e. Architecture & Design:
              - Alignment with existing patterns in the codebase
              - Proper use of design patterns
              - Database schema changes and migrations
              - API contract changes and backwards compatibility
              - Coupling and abstractions

            f. Testing Coverage:
              - Critical business logic test coverage
              - Spec files for new service objects
              - Factory definitions for new models
              - System tests for end-to-end referral flows
              - Reversible and tested database migrations

            Before providing inline comments and the final review, wrap your analysis inside <file_analysis> tags. For each file:

            1. List the specific changes made WITH THEIR EXACT LINE NUMBERS FROM THE DIFF
            2. Analyze how these changes interact with existing code
            3. Identify potential side effects or breaking changes
            4. List all potential issues found, WITH THE EXACT LINE NUMBER where each issue occurs
            5. For each potential issue:
              - Note the EXACT line number from the diff where the issue is located
              - Consider and note its impact on different aspects of the system (e.g., performance, security, maintainability)
              - Assign a priority (Critical üö®, Important ‚ö†Ô∏è, or Suggestion üí°) based on its severity and impact
            6. Prioritize the issues based on their assigned priorities and system impact

            This process will help ensure a thorough interpretation of the code changes.
            It's OK for this section to be quite long.
            <file_analysis> tags are only for your analysis, do not include them in your final review.

            Example of internal analysis (DO NOT OUTPUT THIS):

            <file_analysis>
            File: app/models/user.rb
            1. Changes:
              - Added new method `calculate_referral_bonus` (lines 45-52 in diff)
              - Modified `update_profile` method (lines 78-85 in diff)

            2. Interactions with existing code:
              - New method called in referral processing workflow
              - Modified method affects user profile updates

            3. Potential side effects:
              - Changes to referral bonus calculation may impact existing users
              - Profile update changes could affect downstream processes

            4. Potential issues:
              - Performance: `calculate_referral_bonus` uses inefficient query (N+1 problem) - LINE 47 in diff
              - Security: Referral bonus calculation not properly sanitized - LINE 49 in diff
              - Testing: Missing unit test for edge cases in `update_profile` - LINE 82 in diff
              - Code Quality: Duplication in error handling logic - LINES 51 and 84 in diff

            5. System impact:
              - Performance issue on LINE 47 could slow down referral processing for all users
              - Security vulnerability on LINE 49 may expose the system to financial exploitation
              - Lack of testing for changes on LINE 82 increases risk of regressions in user profile management
              - Code duplication on LINES 51 and 84 may lead to inconsistent error handling across the application
            ...
            </file_analysis>

            After your analysis, provide inline comments using the `mcp__github__add_comment_to_pending_review` function. For each issue:
            - Use the EXACT line number from the diff (not calculated or offset)
            - Clearly explain the problem
            - Provide the impact/consequences
            - Suggest a specific solution with code examples
            - Double-check that the line number matches where the issue actually appears in the diff

            Remember to:
            - Be constructive and professional
            - Provide concrete examples and solutions
            - Consider the broader system impact
            - Verify that tests adequately cover the changes
            - Check that documentation is updated if needed
            - ALWAYS use the exact line numbers shown in the GitHub diff

            After adding all inline comments, you MUST submit the review using the `mcp__github__submit_pending_pull_request_review` function with:
            - event: "COMMENT" (MANDATORY - DO NOT USE "APPROVE" OR "REQUEST_CHANGES")

            ‚ö†Ô∏è IMPORTANT: You are providing code review feedback ONLY:
            - Always use event: "COMMENT" when calling `mcp__github__add_comment_to_pending_review`
            - NEVER use event: "APPROVE" or event: "REQUEST_CHANGES" (this would approve or block the PR)
            - This applies regardless of the code quality or number of issues found

            Include a summary review comment with the following structure:

            ```markdown
            ## Summary
            [Brief overview of the PR and its purpose]

            ## Key Observations
            - [List 3-5 main points about the changes]

            ## Recommendations
            - [List 2-3 high-level recommendations]

            ## Overall Assessment
            [1-2 sentences on the overall quality and readiness of the PR]

            ---
            üí° To request another review, post a new comment with "/claude-review".
            ```
